/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Cartesia from "../../../../api/index";
import * as core from "../../../../core";
import { VoiceId } from "./VoiceId";
import { Embedding } from "../../embedding/types/Embedding";
import { SupportedLanguage } from "../../tts/types/SupportedLanguage";

export const Voice: core.serialization.ObjectSchema<serializers.Voice.Raw, Cartesia.Voice> = core.serialization.object({
    id: VoiceId,
    userId: core.serialization.property("user_id", core.serialization.string().optional()),
    isPublic: core.serialization.property("is_public", core.serialization.boolean()),
    name: core.serialization.string(),
    description: core.serialization.string(),
    createdAt: core.serialization.property("created_at", core.serialization.date()),
    embedding: Embedding,
    language: SupportedLanguage,
});

export declare namespace Voice {
    interface Raw {
        id: VoiceId.Raw;
        user_id?: string | null;
        is_public: boolean;
        name: string;
        description: string;
        created_at: string;
        embedding: Embedding.Raw;
        language: SupportedLanguage.Raw;
    }
}
