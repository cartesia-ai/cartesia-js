/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Cartesia from "../../../../api/index";
import * as core from "../../../../core";
import { WebSocketChunkResponse } from "../../tts/types/WebSocketChunkResponse";
import { WebSocketDoneResponse } from "../../tts/types/WebSocketDoneResponse";
import { WebSocketErrorResponse } from "../../tts/types/WebSocketErrorResponse";

export const StreamingResponse: core.serialization.Schema<
    serializers.StreamingResponse.Raw,
    Cartesia.StreamingResponse
> = core.serialization
    .union("type", {
        chunk: WebSocketChunkResponse,
        done: WebSocketDoneResponse,
        error: WebSocketErrorResponse,
    })
    .transform<Cartesia.StreamingResponse>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace StreamingResponse {
    export type Raw = StreamingResponse.Chunk | StreamingResponse.Done | StreamingResponse.Error;

    export interface Chunk extends WebSocketChunkResponse.Raw {
        type: "chunk";
    }

    export interface Done extends WebSocketDoneResponse.Raw {
        type: "done";
    }

    export interface Error extends WebSocketErrorResponse.Raw {
        type: "error";
    }
}
