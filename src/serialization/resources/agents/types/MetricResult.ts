/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index.js";
import * as Cartesia from "../../../../api/index.js";
import * as core from "../../../../core/index.js";
import { AgentTranscript } from "./AgentTranscript.js";
import { AgentMetricResultStatus } from "./AgentMetricResultStatus.js";

export const MetricResult: core.serialization.ObjectSchema<serializers.MetricResult.Raw, Cartesia.MetricResult> =
    core.serialization.object({
        id: core.serialization.string(),
        metricId: core.serialization.string(),
        metricName: core.serialization.string(),
        summary: core.serialization.string(),
        transcript: core.serialization.list(AgentTranscript).optional(),
        agentId: core.serialization.string(),
        callId: core.serialization.string(),
        deploymentId: core.serialization.string(),
        result: core.serialization.string(),
        jsonResult: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
        value: core.serialization.unknown().optional(),
        status: AgentMetricResultStatus,
        runId: core.serialization.string().optional(),
        createdAt: core.serialization.date(),
    });

export declare namespace MetricResult {
    export interface Raw {
        id: string;
        metricId: string;
        metricName: string;
        summary: string;
        transcript?: AgentTranscript.Raw[] | null;
        agentId: string;
        callId: string;
        deploymentId: string;
        result: string;
        jsonResult?: Record<string, unknown> | null;
        value?: unknown | null;
        status: AgentMetricResultStatus.Raw;
        runId?: string | null;
        createdAt: string;
    }
}
