/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index.js";
import * as Cartesia from "../../../../api/index.js";
import * as core from "../../../../core/index.js";
import { TextChunk } from "./TextChunk.js";
import { ToolCall } from "./ToolCall.js";
import { LogEvent } from "./LogEvent.js";
import { LogMetric } from "./LogMetric.js";

export const AgentTranscript: core.serialization.ObjectSchema<
    serializers.AgentTranscript.Raw,
    Cartesia.AgentTranscript
> = core.serialization.object({
    role: core.serialization.string(),
    text: core.serialization.string().optional(),
    textChunks: core.serialization.property("text_chunks", core.serialization.list(TextChunk).optional()),
    startTimestamp: core.serialization.property("start_timestamp", core.serialization.number()),
    endTimestamp: core.serialization.property("end_timestamp", core.serialization.number()),
    endReason: core.serialization.property("end_reason", core.serialization.string().optional()),
    toolCalls: core.serialization.property("tool_calls", core.serialization.list(ToolCall).optional()),
    vadBufferMs: core.serialization.property("vad_buffer_ms", core.serialization.number().optional()),
    ttsTtfb: core.serialization.property("tts_ttfb", core.serialization.number().optional()),
    logEvent: core.serialization.property("log_event", LogEvent.optional()),
    logMetric: core.serialization.property("log_metric", LogMetric.optional()),
});

export declare namespace AgentTranscript {
    export interface Raw {
        role: string;
        text?: string | null;
        text_chunks?: TextChunk.Raw[] | null;
        start_timestamp: number;
        end_timestamp: number;
        end_reason?: string | null;
        tool_calls?: ToolCall.Raw[] | null;
        vad_buffer_ms?: number | null;
        tts_ttfb?: number | null;
        log_event?: LogEvent.Raw | null;
        log_metric?: LogMetric.Raw | null;
    }
}
