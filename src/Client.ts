/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import { mergeHeaders } from "./core/headers.js";
import { Agents } from "./api/resources/agents/client/Client.js";
import { ApiStatus } from "./api/resources/apiStatus/client/Client.js";
import { Auth } from "./api/resources/auth/client/Client.js";
import { Datasets } from "./api/resources/datasets/client/Client.js";
import { FineTunes } from "./api/resources/fineTunes/client/Client.js";
import { Infill } from "./api/resources/infill/client/Client.js";
import { PronunciationDicts } from "./api/resources/pronunciationDicts/client/Client.js";
import { Stt } from "./api/resources/stt/client/Client.js";
import { Tts } from "./api/resources/tts/client/Client.js";
import { VoiceChanger } from "./api/resources/voiceChanger/client/Client.js";
import { Voices } from "./api/resources/voices/client/Client.js";

export declare namespace CartesiaClient {
    export interface Options {
        environment?: core.Supplier<environments.CartesiaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2025-04-16";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2025-04-16";
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class CartesiaClient {
    protected readonly _options: CartesiaClient.Options;
    protected _agents: Agents | undefined;
    protected _apiStatus: ApiStatus | undefined;
    protected _auth: Auth | undefined;
    protected _datasets: Datasets | undefined;
    protected _fineTunes: FineTunes | undefined;
    protected _infill: Infill | undefined;
    protected _pronunciationDicts: PronunciationDicts | undefined;
    protected _stt: Stt | undefined;
    protected _tts: Tts | undefined;
    protected _voiceChanger: VoiceChanger | undefined;
    protected _voices: Voices | undefined;

    constructor(_options: CartesiaClient.Options = {}) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "Cartesia-Version": _options?.cartesiaVersion ?? "2025-04-16",
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@cartesia/cartesia-js",
                    "X-Fern-SDK-Version": "3.0.0-alpha0",
                    "User-Agent": "@cartesia/cartesia-js/3.0.0-alpha0",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    public get agents(): Agents {
        return (this._agents ??= new Agents(this._options));
    }

    public get apiStatus(): ApiStatus {
        return (this._apiStatus ??= new ApiStatus(this._options));
    }

    public get auth(): Auth {
        return (this._auth ??= new Auth(this._options));
    }

    public get datasets(): Datasets {
        return (this._datasets ??= new Datasets(this._options));
    }

    public get fineTunes(): FineTunes {
        return (this._fineTunes ??= new FineTunes(this._options));
    }

    public get infill(): Infill {
        return (this._infill ??= new Infill(this._options));
    }

    public get pronunciationDicts(): PronunciationDicts {
        return (this._pronunciationDicts ??= new PronunciationDicts(this._options));
    }

    public get stt(): Stt {
        return (this._stt ??= new Stt(this._options));
    }

    public get tts(): Tts {
        return (this._tts ??= new Tts(this._options));
    }

    public get voiceChanger(): VoiceChanger {
        return (this._voiceChanger ??= new VoiceChanger(this._options));
    }

    public get voices(): Voices {
        return (this._voices ??= new Voices(this._options));
    }
}
