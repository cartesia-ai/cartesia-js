/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as fs from "fs";
import * as core from "../../../../../core/index.js";
import * as Cartesia from "../../../../index.js";

/**
 * @example
 *     {
 *         leftAudio: fs.createReadStream("/path/to/your/file"),
 *         rightAudio: fs.createReadStream("/path/to/your/file"),
 *         modelId: "sonic-2",
 *         language: "en",
 *         transcript: "middle segment",
 *         voiceId: "694f9389-aac1-45b6-b726-9d9369183238",
 *         outputFormatContainer: "mp3",
 *         outputFormatSampleRate: 44100,
 *         outputFormatBitRate: 128000
 *     }
 *
 * @example
 *     {
 *         leftAudio: fs.createReadStream("/path/to/your/file"),
 *         rightAudio: fs.createReadStream("/path/to/your/file"),
 *         modelId: "sonic-2",
 *         language: "en",
 *         transcript: "middle segment",
 *         voiceId: "694f9389-aac1-45b6-b726-9d9369183238",
 *         outputFormatContainer: "wav",
 *         outputFormatSampleRate: 44100,
 *         outputFormatEncoding: "pcm_f32le"
 *     }
 */
export interface InfillBytesRequest {
    leftAudio: core.file.Uploadable.FileLike;
    rightAudio: core.file.Uploadable.FileLike;
    /** The ID of the model to use for generating audio */
    modelId: string;
    /** The language of the transcript */
    language: string;
    /** The infill text to generate */
    transcript: string;
    /** The ID of the voice to use for generating audio */
    voiceId: string;
    /** The format of the output audio */
    outputFormatContainer: Cartesia.OutputFormatContainer;
    /** The sample rate of the output audio */
    outputFormatSampleRate: number;
    /** Required for `raw` and `wav` containers. */
    outputFormatEncoding?: Cartesia.RawEncoding;
    /** Required for `mp3` containers. */
    outputFormatBitRate?: number;
}
