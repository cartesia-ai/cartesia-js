/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Cartesia from "../../../index.js";
import * as serializers from "../../../../serialization/index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Infill {
    export interface Options {
        environment?: core.Supplier<environments.CartesiaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2025-04-16";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2025-04-16";
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Infill {
    protected readonly _options: Infill.Options;

    constructor(_options: Infill.Options = {}) {
        this._options = _options;
    }

    /**
     * Generate audio that smoothly connects two existing audio segments. This is useful for inserting new speech between existing speech segments while maintaining natural transitions.
     *
     * **The cost is 1 credit per character of the infill text plus a fixed cost of 300 credits.**
     *
     * Infilling is only available on `sonic-2` at this time.
     *
     * At least one of `left_audio` or `right_audio` must be provided.
     *
     * As with all generative models, there's some inherent variability, but here's some tips we recommend to get the best results from infill:
     * - Use longer infill transcripts
     *   - This gives the model more flexibility to adapt to the rest of the audio
     * - Target natural pauses in the audio when deciding where to clip
     *   - This means you don't need word-level timestamps to be as precise
     * - Clip right up to the start and end of the audio segment you want infilled, keeping as much silence in the left/right audio segments as possible
     *   - This helps the model generate more natural transitions
     */
    public bytes(
        request: Cartesia.InfillBytesRequest,
        requestOptions?: Infill.RequestOptions,
    ): core.HttpResponsePromise<core.BinaryResponse> {
        return core.HttpResponsePromise.fromPromise(this.__bytes(request, requestOptions));
    }

    private async __bytes(
        request: Cartesia.InfillBytesRequest,
        requestOptions?: Infill.RequestOptions,
    ): Promise<core.WithRawResponse<core.BinaryResponse>> {
        const _request = await core.newFormData();
        await _request.appendFile("left_audio", request.leftAudio);
        await _request.appendFile("right_audio", request.rightAudio);
        _request.append("model_id", request.modelId);
        _request.append("language", request.language);
        _request.append("transcript", request.transcript);
        _request.append("voice_id", request.voiceId);
        _request.append(
            "output_format[container]",
            serializers.OutputFormatContainer.jsonOrThrow(request.outputFormatContainer, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
        );
        _request.append("output_format[sample_rate]", request.outputFormatSampleRate.toString());
        if (request.outputFormatEncoding != null) {
            _request.append(
                "output_format[encoding]",
                serializers.RawEncoding.jsonOrThrow(request.outputFormatEncoding, {
                    unrecognizedObjectKeys: "strip",
                    omitUndefined: true,
                }),
            );
        }

        if (request.outputFormatBitRate != null) {
            _request.append("output_format[bit_rate]", request.outputFormatBitRate.toString());
        }

        const _maybeEncodedRequest = await _request.getRequest();
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Cartesia-Version": requestOptions?.cartesiaVersion ?? "2025-04-16",
                ..._maybeEncodedRequest.headers,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)<core.BinaryResponse>({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CartesiaEnvironment.Production,
                "/infill/bytes",
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            responseType: "binary-response",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CartesiaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CartesiaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CartesiaTimeoutError("Timeout exceeded when calling POST /infill/bytes.");
            case "unknown":
                throw new errors.CartesiaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["CARTESIA_API_KEY"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
