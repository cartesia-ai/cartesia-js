/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface Deployment {
    /** The unique identifier for the deployment. */
    id: string;
    /** The ID of the agent associated with this deployment. */
    agentId: string;
    /** The current status of the deployment. It can be `queued`, `inactive`, `deploy_error`, `skipped`, `build_error`, `building`, or `deployed`. */
    status: string;
    /** Marks that this deployment is the active deployment for its associated `agent_id`. Only one deployment per agent can be pinned at a time. Deployments can be pinned even if they are not live or failed. */
    isPinned: boolean;
    /** True if this deployment is the live production deployment for its associated `agent_id`. Only one deployment per agent can be live at a time. */
    isLive: boolean;
    /** The ID of the environment variable collection associated with this deployment. */
    envVarCollectionId: string;
    /** The ID of the source code file associated with this deployment. */
    sourceCodeFileId: string;
    /** The commit hash of the Git repository for this deployment. */
    gitCommitHash: string;
    /** The UTC timestamp when the deployment was created. */
    createdAt: Date;
    /** The UTC timestamp when the deployment was last updated. */
    updatedAt: Date;
    /** The UTC timestamp when the build was completed. */
    buildCompletedAt: Date;
    /** Any error that occurred during the build process. */
    buildError?: string;
    /** Logs generated during the build process of the deployment. */
    buildLogs: string;
    /** The UTC timestamp when the build process started. */
    buildStartedAt: Date;
    /** The UTC timestamp when the deployment process started. */
    deploymentStartedAt: Date;
    /** The UTC timestamp when the deployment process was completed. */
    deploymentCompletedAt: Date;
    /** Any error that occurred during the deployment process. */
    deploymentError?: string;
}
