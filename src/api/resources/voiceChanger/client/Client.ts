/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Cartesia from "../../../index.js";
import * as serializers from "../../../../serialization/index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace VoiceChanger {
    export interface Options {
        environment?: core.Supplier<environments.CartesiaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2025-04-16";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2025-04-16";
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class VoiceChanger {
    protected readonly _options: VoiceChanger.Options;

    constructor(_options: VoiceChanger.Options = {}) {
        this._options = _options;
    }

    /**
     * Takes an audio file of speech, and returns an audio file of speech spoken with the same intonation, but with a different voice.
     *
     * This endpoint is priced at 15 characters per second of input audio.
     */
    public bytes(
        request: Cartesia.VoiceChangerBytesRequest,
        requestOptions?: VoiceChanger.RequestOptions,
    ): core.HttpResponsePromise<core.BinaryResponse> {
        return core.HttpResponsePromise.fromPromise(this.__bytes(request, requestOptions));
    }

    private async __bytes(
        request: Cartesia.VoiceChangerBytesRequest,
        requestOptions?: VoiceChanger.RequestOptions,
    ): Promise<core.WithRawResponse<core.BinaryResponse>> {
        const _request = await core.newFormData();
        await _request.appendFile("clip", request.clip);
        _request.append("voice[id]", request.voiceId);
        _request.append(
            "output_format[container]",
            serializers.OutputFormatContainer.jsonOrThrow(request.outputFormatContainer, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
        );
        _request.append("output_format[sample_rate]", request.outputFormatSampleRate.toString());
        if (request.outputFormatEncoding != null) {
            _request.append(
                "output_format[encoding]",
                serializers.RawEncoding.jsonOrThrow(request.outputFormatEncoding, {
                    unrecognizedObjectKeys: "strip",
                    omitUndefined: true,
                }),
            );
        }

        if (request.outputFormatBitRate != null) {
            _request.append("output_format[bit_rate]", request.outputFormatBitRate.toString());
        }

        const _maybeEncodedRequest = await _request.getRequest();
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Cartesia-Version": requestOptions?.cartesiaVersion ?? "2025-04-16",
                ..._maybeEncodedRequest.headers,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)<core.BinaryResponse>({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CartesiaEnvironment.Production,
                "/voice-changer/bytes",
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            responseType: "binary-response",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CartesiaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CartesiaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CartesiaTimeoutError("Timeout exceeded when calling POST /voice-changer/bytes.");
            case "unknown":
                throw new errors.CartesiaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    public sse(
        request: Cartesia.VoiceChangerSseRequest,
        requestOptions?: VoiceChanger.RequestOptions,
    ): core.HttpResponsePromise<core.Stream<Cartesia.StreamingResponse>> {
        return core.HttpResponsePromise.fromPromise(this.__sse(request, requestOptions));
    }

    private async __sse(
        request: Cartesia.VoiceChangerSseRequest,
        requestOptions?: VoiceChanger.RequestOptions,
    ): Promise<core.WithRawResponse<core.Stream<Cartesia.StreamingResponse>>> {
        const _request = await core.newFormData();
        await _request.appendFile("clip", request.clip);
        _request.append("voice[id]", request.voiceId);
        _request.append(
            "output_format[container]",
            serializers.OutputFormatContainer.jsonOrThrow(request.outputFormatContainer, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
        );
        _request.append("output_format[sample_rate]", request.outputFormatSampleRate.toString());
        if (request.outputFormatEncoding != null) {
            _request.append(
                "output_format[encoding]",
                serializers.RawEncoding.jsonOrThrow(request.outputFormatEncoding, {
                    unrecognizedObjectKeys: "strip",
                    omitUndefined: true,
                }),
            );
        }

        if (request.outputFormatBitRate != null) {
            _request.append("output_format[bit_rate]", request.outputFormatBitRate.toString());
        }

        const _maybeEncodedRequest = await _request.getRequest();
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Cartesia-Version": requestOptions?.cartesiaVersion ?? "2025-04-16",
                ..._maybeEncodedRequest.headers,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)<ReadableStream>({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CartesiaEnvironment.Production,
                "/voice-changer/sse",
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            responseType: "sse",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: new core.Stream({
                    stream: _response.body,
                    parse: async (data) => {
                        return serializers.StreamingResponse.parseOrThrow(data, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        });
                    },
                    signal: requestOptions?.abortSignal,
                    eventShape: {
                        type: "json",
                        messageTerminator: "\n",
                    },
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CartesiaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CartesiaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CartesiaTimeoutError("Timeout exceeded when calling POST /voice-changer/sse.");
            case "unknown":
                throw new errors.CartesiaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["CARTESIA_API_KEY"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
