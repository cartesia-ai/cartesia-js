/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Cartesia from "../../../index.js";
import * as fs from "fs";
import * as serializers from "../../../../serialization/index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Stt {
    export interface Options {
        environment?: core.Supplier<environments.CartesiaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2025-04-16";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2025-04-16";
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Stt {
    protected readonly _options: Stt.Options;

    constructor(_options: Stt.Options = {}) {
        this._options = _options;
    }

    /**
     * Transcribes audio files into text using Cartesia's Speech-to-Text API.
     *
     * Upload an audio file and receive a complete transcription response. Supports arbitrarily long audio files with automatic intelligent chunking for longer audio.
     *
     * **Supported audio formats:** flac, m4a, mp3, mp4, mpeg, mpga, oga, ogg, wav, webm
     *
     * **Response format:** Returns JSON with transcribed text, duration, and language. Include `timestamp_granularities: ["word"]` to get word-level timestamps.
     *
     * **Pricing:** Batch transcription is priced at **1 credit per 2 seconds** of audio processed.
     *
     * <Note>
     * For migrating from the OpenAI SDK, see our [OpenAI Whisper to Cartesia Ink Migration Guide](/api-reference/stt/migrate-from-open-ai).
     * </Note>
     *
     * @param {Cartesia.TranscriptionRequest} request
     * @param {Stt.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     import { createReadStream } from "fs";
     *     await client.stt.transcribe({
     *         file: fs.createReadStream("/path/to/your/file"),
     *         model: "ink-whisper",
     *         language: "en"
     *     })
     *
     * @example
     *     import { createReadStream } from "fs";
     *     await client.stt.transcribe({
     *         file: fs.createReadStream("/path/to/your/file"),
     *         model: "ink-whisper",
     *         language: "en",
     *         timestampGranularities: ["word"]
     *     })
     */
    public transcribe(
        request: Cartesia.TranscriptionRequest,
        requestOptions?: Stt.RequestOptions,
    ): core.HttpResponsePromise<Cartesia.TranscriptionResponse> {
        return core.HttpResponsePromise.fromPromise(this.__transcribe(request, requestOptions));
    }

    private async __transcribe(
        request: Cartesia.TranscriptionRequest,
        requestOptions?: Stt.RequestOptions,
    ): Promise<core.WithRawResponse<Cartesia.TranscriptionResponse>> {
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (request.encoding != null) {
            _queryParams["encoding"] = serializers.SttEncoding.jsonOrThrow(request.encoding, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            });
        }

        if (request.sampleRate != null) {
            _queryParams["sample_rate"] = request.sampleRate.toString();
        }

        const _request = await core.newFormData();
        await _request.appendFile("file", request.file);
        _request.append("model", request.model);
        if (request.language != null) {
            _request.append("language", request.language);
        }

        if (request.timestampGranularities != null) {
            for (const _item of request.timestampGranularities) {
                _request.append(
                    "timestamp_granularities[]",
                    serializers.TimestampGranularity.jsonOrThrow(_item, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    }),
                );
            }
        }

        const _maybeEncodedRequest = await _request.getRequest();
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Cartesia-Version": requestOptions?.cartesiaVersion ?? "2025-04-16",
                ..._maybeEncodedRequest.headers,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CartesiaEnvironment.Production,
                "/stt",
            ),
            method: "POST",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.TranscriptionResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CartesiaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CartesiaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CartesiaTimeoutError("Timeout exceeded when calling POST /stt.");
            case "unknown":
                throw new errors.CartesiaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["CARTESIA_API_KEY"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
