/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Cartesia from "../../../index.js";
import * as serializers from "../../../../serialization/index.js";
import { toJson } from "../../../../core/json.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";
import * as fs from "fs";

export declare namespace Voices {
    export interface Options {
        environment?: core.Supplier<environments.CartesiaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2025-04-16";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2025-04-16";
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Voices {
    protected readonly _options: Voices.Options;

    constructor(_options: Voices.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {Cartesia.GetVoicesRequest} request
     * @param {Voices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.voices.list({
     *         gender: null
     *     })
     */
    public async list(
        request: Cartesia.GetVoicesRequest,
        requestOptions?: Voices.RequestOptions,
    ): Promise<core.Page<Cartesia.Voice>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (request: Cartesia.GetVoicesRequest): Promise<core.WithRawResponse<Cartesia.GetVoicesResponse>> => {
                const { limit, startingAfter, endingBefore, isOwner, isStarred, gender, expand } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (limit != null) {
                    _queryParams["limit"] = limit.toString();
                }
                if (startingAfter != null) {
                    _queryParams["starting_after"] = startingAfter;
                }
                if (endingBefore != null) {
                    _queryParams["ending_before"] = endingBefore;
                }
                if (isOwner != null) {
                    _queryParams["is_owner"] = isOwner.toString();
                }
                if (isStarred != null) {
                    _queryParams["is_starred"] = isStarred.toString();
                }
                if (gender !== undefined) {
                    _queryParams["gender"] = serializers.GenderPresentation.jsonOrThrow(gender, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    });
                }
                if (expand != null) {
                    _queryParams["expand[]"] = toJson(expand);
                }
                let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
                    this._options?.headers,
                    mergeOnlyDefinedHeaders({
                        Authorization: await this._getAuthorizationHeader(),
                        "Cartesia-Version": requestOptions?.cartesiaVersion ?? "2025-04-16",
                    }),
                    requestOptions?.headers,
                );
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.CartesiaEnvironment.Production,
                        "/voices/",
                    ),
                    method: "GET",
                    headers: _headers,
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: serializers.GetVoicesResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.CartesiaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.CartesiaError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.CartesiaTimeoutError("Timeout exceeded when calling GET /voices/.");
                    case "unknown":
                        throw new errors.CartesiaError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Cartesia.GetVoicesResponse, Cartesia.Voice>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.nextPage != null && !(typeof response?.nextPage === "string" && response?.nextPage === ""),
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "startingAfter", response?.nextPage));
            },
        });
    }

    /**
     * Clone a high similarity voice from an audio clip. Clones are more similar to the source clip, but may reproduce background noise. For these, use an audio clip about 5 seconds long.
     *
     * @param {Cartesia.CloneVoiceRequest} request
     * @param {Voices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     import { createReadStream } from "fs";
     *     await client.voices.clone({
     *         clip: fs.createReadStream("/path/to/your/file"),
     *         name: "A high-similarity cloned voice",
     *         description: "Copied from Cartesia docs",
     *         language: "en"
     *     })
     */
    public clone(
        request: Cartesia.CloneVoiceRequest,
        requestOptions?: Voices.RequestOptions,
    ): core.HttpResponsePromise<Cartesia.VoiceMetadata> {
        return core.HttpResponsePromise.fromPromise(this.__clone(request, requestOptions));
    }

    private async __clone(
        request: Cartesia.CloneVoiceRequest,
        requestOptions?: Voices.RequestOptions,
    ): Promise<core.WithRawResponse<Cartesia.VoiceMetadata>> {
        const _request = await core.newFormData();
        await _request.appendFile("clip", request.clip);
        _request.append("name", request.name);
        if (request.description != null) {
            _request.append("description", request.description);
        }

        _request.append(
            "language",
            serializers.SupportedLanguage.jsonOrThrow(request.language, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
        );
        if (request.enhance != null) {
            _request.append("enhance", request.enhance.toString());
        }

        if (request.baseVoiceId != null) {
            _request.append(
                "base_voice_id",
                serializers.VoiceId.jsonOrThrow(request.baseVoiceId, {
                    unrecognizedObjectKeys: "strip",
                    omitUndefined: true,
                }),
            );
        }

        const _maybeEncodedRequest = await _request.getRequest();
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Cartesia-Version": requestOptions?.cartesiaVersion ?? "2025-04-16",
                ..._maybeEncodedRequest.headers,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CartesiaEnvironment.Production,
                "/voices/clone",
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.VoiceMetadata.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CartesiaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CartesiaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CartesiaTimeoutError("Timeout exceeded when calling POST /voices/clone.");
            case "unknown":
                throw new errors.CartesiaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Cartesia.VoiceId} id
     * @param {Voices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.voices.delete("id")
     */
    public delete(id: Cartesia.VoiceId, requestOptions?: Voices.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(
        id: Cartesia.VoiceId,
        requestOptions?: Voices.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Cartesia-Version": requestOptions?.cartesiaVersion ?? "2025-04-16",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CartesiaEnvironment.Production,
                `/voices/${encodeURIComponent(serializers.VoiceId.jsonOrThrow(id, { omitUndefined: true }))}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CartesiaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CartesiaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CartesiaTimeoutError("Timeout exceeded when calling DELETE /voices/{id}.");
            case "unknown":
                throw new errors.CartesiaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update the name, description, and gender of a voice. To set the gender back to the default, set the gender to `null`. If gender is not specified, the gender will not be updated.
     *
     * @param {Cartesia.VoiceId} id
     * @param {Cartesia.UpdateVoiceRequest} request
     * @param {Voices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.voices.update("8f7d3c2e-1a2b-3c4d-5e6f-7g8h9i0j1k2l", {
     *         name: "Sarah Peninsular Spanish",
     *         description: "Sarah Voice in Peninsular Spanish",
     *         gender: "feminine"
     *     })
     */
    public update(
        id: Cartesia.VoiceId,
        request: Cartesia.UpdateVoiceRequest,
        requestOptions?: Voices.RequestOptions,
    ): core.HttpResponsePromise<Cartesia.Voice> {
        return core.HttpResponsePromise.fromPromise(this.__update(id, request, requestOptions));
    }

    private async __update(
        id: Cartesia.VoiceId,
        request: Cartesia.UpdateVoiceRequest,
        requestOptions?: Voices.RequestOptions,
    ): Promise<core.WithRawResponse<Cartesia.Voice>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Cartesia-Version": requestOptions?.cartesiaVersion ?? "2025-04-16",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CartesiaEnvironment.Production,
                `/voices/${encodeURIComponent(serializers.VoiceId.jsonOrThrow(id, { omitUndefined: true }))}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.UpdateVoiceRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Voice.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CartesiaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CartesiaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CartesiaTimeoutError("Timeout exceeded when calling PATCH /voices/{id}.");
            case "unknown":
                throw new errors.CartesiaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Cartesia.VoiceId} id
     * @param {Voices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.voices.get("id")
     */
    public get(id: Cartesia.VoiceId, requestOptions?: Voices.RequestOptions): core.HttpResponsePromise<Cartesia.Voice> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: Cartesia.VoiceId,
        requestOptions?: Voices.RequestOptions,
    ): Promise<core.WithRawResponse<Cartesia.Voice>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Cartesia-Version": requestOptions?.cartesiaVersion ?? "2025-04-16",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CartesiaEnvironment.Production,
                `/voices/${encodeURIComponent(serializers.VoiceId.jsonOrThrow(id, { omitUndefined: true }))}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Voice.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CartesiaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CartesiaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CartesiaTimeoutError("Timeout exceeded when calling GET /voices/{id}.");
            case "unknown":
                throw new errors.CartesiaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a new voice from an existing voice localized to a new language and dialect.
     *
     * @param {Cartesia.LocalizeVoiceRequest} request
     * @param {Voices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.voices.localize({
     *         voiceId: "694f9389-aac1-45b6-b726-9d9369183238",
     *         name: "Sarah Peninsular Spanish",
     *         description: "Sarah Voice in Peninsular Spanish",
     *         language: "es",
     *         originalSpeakerGender: "female",
     *         dialect: "pe"
     *     })
     */
    public localize(
        request: Cartesia.LocalizeVoiceRequest,
        requestOptions?: Voices.RequestOptions,
    ): core.HttpResponsePromise<Cartesia.VoiceMetadata> {
        return core.HttpResponsePromise.fromPromise(this.__localize(request, requestOptions));
    }

    private async __localize(
        request: Cartesia.LocalizeVoiceRequest,
        requestOptions?: Voices.RequestOptions,
    ): Promise<core.WithRawResponse<Cartesia.VoiceMetadata>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "Cartesia-Version": requestOptions?.cartesiaVersion ?? "2025-04-16",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CartesiaEnvironment.Production,
                "/voices/localize",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.LocalizeVoiceRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.VoiceMetadata.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CartesiaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CartesiaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CartesiaTimeoutError("Timeout exceeded when calling POST /voices/localize.");
            case "unknown":
                throw new errors.CartesiaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["CARTESIA_API_KEY"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
