/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CartesiaClient } from "../../src/Client";

describe("Auth", () => {
    test("access-token", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { grants: { tts: true, stt: true }, expires_in: 60 };
        const rawResponseBody = {
            token: "eyJhbGciOiJIUzI1NiIsImtpZCI6InNzaWRfeU1uQ0NxRUZXTmJ5ZmFqdUFCVWhaTCJ9.eyJncmFudHMiOnsidHRzIjp0cnVlLCJzdHQiOnRydWV9LCJqdGkiOiJMK0dwd1Z1QWpzTUMiLCJpYXQiOjE3NDQ3NDk1NTQsImlzcyI6Imh0dHBzOi8vYXBpLmNhcnRlc2lhLmFpIiwiZXhwIjoxNzQ0NzQ5NjE0fQ.example",
        };
        server
            .mockEndpoint()
            .post("/access-token")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.auth.accessToken({
            grants: {
                tts: true,
                stt: true,
            },
            expiresIn: 60,
        });
        expect(response).toEqual({
            token: "eyJhbGciOiJIUzI1NiIsImtpZCI6InNzaWRfeU1uQ0NxRUZXTmJ5ZmFqdUFCVWhaTCJ9.eyJncmFudHMiOnsidHRzIjp0cnVlLCJzdHQiOnRydWV9LCJqdGkiOiJMK0dwd1Z1QWpzTUMiLCJpYXQiOjE3NDQ3NDk1NTQsImlzcyI6Imh0dHBzOi8vYXBpLmNhcnRlc2lhLmFpIiwiZXhwIjoxNzQ0NzQ5NjE0fQ.example",
        });
    });
});
