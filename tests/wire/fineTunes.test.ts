/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CartesiaClient } from "../../src/Client";

describe("FineTunes", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    language: "language",
                    model_id: "model_id",
                    dataset: "dataset",
                    status: "created",
                },
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    language: "language",
                    model_id: "model_id",
                    dataset: "dataset",
                    status: "created",
                },
            ],
            has_more: true,
        };
        server.mockEndpoint().get("/fine-tunes/").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.fineTunes.list();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    language: "language",
                    modelId: "model_id",
                    dataset: "dataset",
                    status: "created",
                },
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    language: "language",
                    modelId: "model_id",
                    dataset: "dataset",
                    status: "created",
                },
            ],
            hasMore: true,
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "name",
            description: "description",
            language: "language",
            model_id: "model_id",
            dataset: "dataset",
        };
        const rawResponseBody = {
            id: "id",
            name: "name",
            description: "description",
            language: "language",
            model_id: "model_id",
            dataset: "dataset",
            status: "created",
        };
        server
            .mockEndpoint()
            .post("/fine-tunes/")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.fineTunes.create({
            name: "name",
            description: "description",
            language: "language",
            modelId: "model_id",
            dataset: "dataset",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
            language: "language",
            modelId: "model_id",
            dataset: "dataset",
            status: "created",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            description: "description",
            language: "language",
            model_id: "model_id",
            dataset: "dataset",
            status: "created",
        };
        server.mockEndpoint().get("/fine-tunes/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.fineTunes.get("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
            language: "language",
            modelId: "model_id",
            dataset: "dataset",
            status: "created",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/fine-tunes/id").respondWith().statusCode(200).build();

        const response = await client.fineTunes.delete("id");
        expect(response).toEqual(undefined);
    });

    test("listVoices", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    is_owner: true,
                    is_public: true,
                    name: "name",
                    description: "description",
                    gender: "masculine",
                    created_at: "2024-01-15T09:30:00Z",
                    is_starred: true,
                    language: "en",
                },
                {
                    id: "id",
                    is_owner: true,
                    is_public: true,
                    name: "name",
                    description: "description",
                    gender: "masculine",
                    created_at: "2024-01-15T09:30:00Z",
                    is_starred: true,
                    language: "en",
                },
            ],
            has_more: true,
        };
        server
            .mockEndpoint()
            .get("/fine-tunes/id/voices")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.fineTunes.listVoices("id");
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    isOwner: true,
                    isPublic: true,
                    name: "name",
                    description: "description",
                    gender: "masculine",
                    createdAt: new Date("2024-01-15T09:30:00.000Z"),
                    isStarred: true,
                    language: "en",
                },
                {
                    id: "id",
                    isOwner: true,
                    isPublic: true,
                    name: "name",
                    description: "description",
                    gender: "masculine",
                    createdAt: new Date("2024-01-15T09:30:00.000Z"),
                    isStarred: true,
                    language: "en",
                },
            ],
            hasMore: true,
        });
    });
});
