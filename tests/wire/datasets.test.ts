/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CartesiaClient } from "../../src/Client";

describe("Datasets", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                { id: "id", name: "name", created_at: "created_at", description: "description" },
                { id: "id", name: "name", created_at: "created_at", description: "description" },
            ],
            has_more: true,
        };
        server.mockEndpoint().get("/datasets/").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.datasets.list();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    name: "name",
                    createdAt: "created_at",
                    description: "description",
                },
                {
                    id: "id",
                    name: "name",
                    createdAt: "created_at",
                    description: "description",
                },
            ],
            hasMore: true,
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", description: "description" };
        const rawResponseBody = { id: "id", name: "name", created_at: "created_at", description: "description" };
        server
            .mockEndpoint()
            .post("/datasets/")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.datasets.create({
            name: "name",
            description: "description",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            createdAt: "created_at",
            description: "description",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { id: "id", name: "name", created_at: "created_at", description: "description" };
        server.mockEndpoint().get("/datasets/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.datasets.get("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            createdAt: "created_at",
            description: "description",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", description: "description" };

        server.mockEndpoint().patch("/datasets/id").jsonBody(rawRequestBody).respondWith().statusCode(200).build();

        const response = await client.datasets.update("id", {
            name: "name",
            description: "description",
        });
        expect(response).toEqual(undefined);
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/datasets/id").respondWith().statusCode(200).build();

        const response = await client.datasets.delete("id");
        expect(response).toEqual(undefined);
    });

    test("listFiles", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                { id: "id", filename: "filename", created_at: "created_at", size: 1 },
                { id: "id", filename: "filename", created_at: "created_at", size: 1 },
            ],
            has_more: true,
        };
        server.mockEndpoint().get("/datasets/id/files").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.datasets.listFiles("id");
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    filename: "filename",
                    createdAt: "created_at",
                    size: 1,
                },
                {
                    id: "id",
                    filename: "filename",
                    createdAt: "created_at",
                    size: 1,
                },
            ],
            hasMore: true,
        });
    });

    test("deleteFile", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/datasets/id/files/fileID").respondWith().statusCode(200).build();

        const response = await client.datasets.deleteFile("id", "fileID");
        expect(response).toEqual(undefined);
    });
});
