/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CartesiaClient } from "../../src/Client";

describe("PronunciationDicts", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    name: "name",
                    owner_id: "owner_id",
                    pinned: true,
                    items: [
                        { text: "text", alias: "alias" },
                        { text: "text", alias: "alias" },
                    ],
                    created_at: "created_at",
                },
                {
                    id: "id",
                    name: "name",
                    owner_id: "owner_id",
                    pinned: true,
                    items: [
                        { text: "text", alias: "alias" },
                        { text: "text", alias: "alias" },
                    ],
                    created_at: "created_at",
                },
            ],
            has_more: true,
        };
        server
            .mockEndpoint()
            .get("/pronunciation-dicts/")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.pronunciationDicts.list();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    name: "name",
                    ownerId: "owner_id",
                    pinned: true,
                    items: [
                        {
                            text: "text",
                            alias: "alias",
                        },
                        {
                            text: "text",
                            alias: "alias",
                        },
                    ],
                    createdAt: "created_at",
                },
                {
                    id: "id",
                    name: "name",
                    ownerId: "owner_id",
                    pinned: true,
                    items: [
                        {
                            text: "text",
                            alias: "alias",
                        },
                        {
                            text: "text",
                            alias: "alias",
                        },
                    ],
                    createdAt: "created_at",
                },
            ],
            hasMore: true,
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", items: undefined };
        const rawResponseBody = {
            id: "id",
            name: "name",
            owner_id: "owner_id",
            pinned: true,
            items: [
                { text: "text", alias: "alias" },
                { text: "text", alias: "alias" },
            ],
            created_at: "created_at",
        };
        server
            .mockEndpoint()
            .post("/pronunciation-dicts/")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.pronunciationDicts.create({
            name: "name",
            items: undefined,
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            ownerId: "owner_id",
            pinned: true,
            items: [
                {
                    text: "text",
                    alias: "alias",
                },
                {
                    text: "text",
                    alias: "alias",
                },
            ],
            createdAt: "created_at",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            owner_id: "owner_id",
            pinned: true,
            items: [
                { text: "text", alias: "alias" },
                { text: "text", alias: "alias" },
            ],
            created_at: "created_at",
        };
        server
            .mockEndpoint()
            .get("/pronunciation-dicts/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.pronunciationDicts.get("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            ownerId: "owner_id",
            pinned: true,
            items: [
                {
                    text: "text",
                    alias: "alias",
                },
                {
                    text: "text",
                    alias: "alias",
                },
            ],
            createdAt: "created_at",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: undefined, items: undefined };
        const rawResponseBody = {
            id: "id",
            name: "name",
            owner_id: "owner_id",
            pinned: true,
            items: [
                { text: "text", alias: "alias" },
                { text: "text", alias: "alias" },
            ],
            created_at: "created_at",
        };
        server
            .mockEndpoint()
            .patch("/pronunciation-dicts/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.pronunciationDicts.update("id", {
            name: undefined,
            items: undefined,
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            ownerId: "owner_id",
            pinned: true,
            items: [
                {
                    text: "text",
                    alias: "alias",
                },
                {
                    text: "text",
                    alias: "alias",
                },
            ],
            createdAt: "created_at",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/pronunciation-dicts/id").respondWith().statusCode(200).build();

        const response = await client.pronunciationDicts.delete("id");
        expect(response).toEqual(undefined);
    });

    test("pin", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().post("/pronunciation-dicts/id/pin").respondWith().statusCode(200).build();

        const response = await client.pronunciationDicts.pin("id");
        expect(response).toEqual(undefined);
    });

    test("unpin", async () => {
        const server = mockServerPool.createServer();
        const client = new CartesiaClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().post("/pronunciation-dicts/id/unpin").respondWith().statusCode(200).build();

        const response = await client.pronunciationDicts.unpin("id");
        expect(response).toEqual(undefined);
    });
});
